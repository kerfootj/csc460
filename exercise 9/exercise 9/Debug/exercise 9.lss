
exercise 9.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000066a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000424  00800200  00800200  0000066a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000066a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000069c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000006e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001110  00000000  00000000  00000788  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dc0  00000000  00000000  00001898  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000069f  00000000  00000000  00002658  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000150  00000000  00000000  00002cf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006de  00000000  00000000  00002e48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002ee  00000000  00000000  00003526  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00003814  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	7a c2       	rjmp	.+1268   	; 0x54a <__vector_21>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	26 e0       	ldi	r18, 0x06	; 6
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a4 32       	cpi	r26, 0x24	; 36
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	69 d2       	rcall	.+1234   	; 0x5d8 <main>
 106:	75 c2       	rjmp	.+1258   	; 0x5f2 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <CSwitch>:
Exit_Kernel:
        /* 
          * This is the "top" half of CSwitch(), generally called by the kernel.
          * Assume I = 0, i.e., all interrupts are disabled.
          */
        SAVECTX
 10a:	0f 92       	push	r0
 10c:	1f 92       	push	r1
 10e:	2f 92       	push	r2
 110:	3f 92       	push	r3
 112:	4f 92       	push	r4
 114:	5f 92       	push	r5
 116:	6f 92       	push	r6
 118:	7f 92       	push	r7
 11a:	8f 92       	push	r8
 11c:	9f 92       	push	r9
 11e:	af 92       	push	r10
 120:	bf 92       	push	r11
 122:	cf 92       	push	r12
 124:	df 92       	push	r13
 126:	ef 92       	push	r14
 128:	ff 92       	push	r15
 12a:	0f 93       	push	r16
 12c:	1f 93       	push	r17
 12e:	2f 93       	push	r18
 130:	3f 93       	push	r19
 132:	4f 93       	push	r20
 134:	5f 93       	push	r21
 136:	6f 93       	push	r22
 138:	7f 93       	push	r23
 13a:	8f 93       	push	r24
 13c:	9f 93       	push	r25
 13e:	af 93       	push	r26
 140:	bf 93       	push	r27
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	ef 93       	push	r30
 148:	ff 93       	push	r31
 14a:	0f b7       	in	r16, 0x3f	; 63
 14c:	0f 93       	push	r16
 14e:	0c b7       	in	r16, 0x3c	; 60
 150:	0f 93       	push	r16
        /* 
          * Now, we have saved the kernel's context.
          * Save the current H/W stack pointer into KernelSp.
          */
        in   r30, SPL
 152:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
 154:	fe b7       	in	r31, 0x3e	; 62
        sts  KernelSp, r30
 156:	e0 93 22 06 	sts	0x0622, r30	; 0x800622 <KernelSp>
        sts  KernelSp+1, r31
 15a:	f0 93 23 06 	sts	0x0623, r31	; 0x800623 <KernelSp+0x1>
        /*
          * We are now ready to restore Cp's context, i.e.,
          * switching the H/W stack pointer to CurrentSp.
          */ 
        lds  r30, CurrentSp
 15e:	e0 91 20 06 	lds	r30, 0x0620	; 0x800620 <CurrentSp>
        lds  r31, CurrentSp+1
 162:	f0 91 21 06 	lds	r31, 0x0621	; 0x800621 <CurrentSp+0x1>
        out  SPL, r30
 166:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
 168:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in Cp's stack.
          * Note: at the bottom of the Cp's context is its return address.
          */
        RESTORECTX
 16a:	0f 91       	pop	r16
 16c:	0c bf       	out	0x3c, r16	; 60
 16e:	0f 91       	pop	r16
 170:	0f bf       	out	0x3f, r16	; 63
 172:	ff 91       	pop	r31
 174:	ef 91       	pop	r30
 176:	df 91       	pop	r29
 178:	cf 91       	pop	r28
 17a:	bf 91       	pop	r27
 17c:	af 91       	pop	r26
 17e:	9f 91       	pop	r25
 180:	8f 91       	pop	r24
 182:	7f 91       	pop	r23
 184:	6f 91       	pop	r22
 186:	5f 91       	pop	r21
 188:	4f 91       	pop	r20
 18a:	3f 91       	pop	r19
 18c:	2f 91       	pop	r18
 18e:	1f 91       	pop	r17
 190:	0f 91       	pop	r16
 192:	ff 90       	pop	r15
 194:	ef 90       	pop	r14
 196:	df 90       	pop	r13
 198:	cf 90       	pop	r12
 19a:	bf 90       	pop	r11
 19c:	af 90       	pop	r10
 19e:	9f 90       	pop	r9
 1a0:	8f 90       	pop	r8
 1a2:	7f 90       	pop	r7
 1a4:	6f 90       	pop	r6
 1a6:	5f 90       	pop	r5
 1a8:	4f 90       	pop	r4
 1aa:	3f 90       	pop	r3
 1ac:	2f 90       	pop	r2
 1ae:	1f 90       	pop	r1
 1b0:	0f 90       	pop	r0
        reti         /* re-enable all global interrupts */
 1b2:	18 95       	reti

000001b4 <Enter_Kernel>:
Enter_Kernel:   
        /*
          * This is the "bottom" half of CSwitch(). We are still executing in
          * Cp's context.
          */
        SAVECTX
 1b4:	0f 92       	push	r0
 1b6:	1f 92       	push	r1
 1b8:	2f 92       	push	r2
 1ba:	3f 92       	push	r3
 1bc:	4f 92       	push	r4
 1be:	5f 92       	push	r5
 1c0:	6f 92       	push	r6
 1c2:	7f 92       	push	r7
 1c4:	8f 92       	push	r8
 1c6:	9f 92       	push	r9
 1c8:	af 92       	push	r10
 1ca:	bf 92       	push	r11
 1cc:	cf 92       	push	r12
 1ce:	df 92       	push	r13
 1d0:	ef 92       	push	r14
 1d2:	ff 92       	push	r15
 1d4:	0f 93       	push	r16
 1d6:	1f 93       	push	r17
 1d8:	2f 93       	push	r18
 1da:	3f 93       	push	r19
 1dc:	4f 93       	push	r20
 1de:	5f 93       	push	r21
 1e0:	6f 93       	push	r22
 1e2:	7f 93       	push	r23
 1e4:	8f 93       	push	r24
 1e6:	9f 93       	push	r25
 1e8:	af 93       	push	r26
 1ea:	bf 93       	push	r27
 1ec:	cf 93       	push	r28
 1ee:	df 93       	push	r29
 1f0:	ef 93       	push	r30
 1f2:	ff 93       	push	r31
 1f4:	0f b7       	in	r16, 0x3f	; 63
 1f6:	0f 93       	push	r16
 1f8:	0c b7       	in	r16, 0x3c	; 60
 1fa:	0f 93       	push	r16
        /* 
          * Now, we have saved the Cp's context.
          * Save the current H/W stack pointer into CurrentSp.
          */
        in   r30, SPL
 1fc:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
 1fe:	fe b7       	in	r31, 0x3e	; 62
        sts  CurrentSp, r30
 200:	e0 93 20 06 	sts	0x0620, r30	; 0x800620 <CurrentSp>
        sts  CurrentSp+1, r31
 204:	f0 93 21 06 	sts	0x0621, r31	; 0x800621 <CurrentSp+0x1>
        /*
          * We are now ready to restore kernel's context, i.e.,
          * switching the H/W stack pointer back to KernelSp.
          */ 
        lds  r30, KernelSp
 208:	e0 91 22 06 	lds	r30, 0x0622	; 0x800622 <KernelSp>
        lds  r31, KernelSp+1
 20c:	f0 91 23 06 	lds	r31, 0x0623	; 0x800623 <KernelSp+0x1>
        out  SPL, r30
 210:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
 212:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in kernel's stack.
          */
       RESTORECTX
 214:	0f 91       	pop	r16
 216:	0c bf       	out	0x3c, r16	; 60
 218:	0f 91       	pop	r16
 21a:	0f bf       	out	0x3f, r16	; 63
 21c:	ff 91       	pop	r31
 21e:	ef 91       	pop	r30
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	bf 91       	pop	r27
 226:	af 91       	pop	r26
 228:	9f 91       	pop	r25
 22a:	8f 91       	pop	r24
 22c:	7f 91       	pop	r23
 22e:	6f 91       	pop	r22
 230:	5f 91       	pop	r21
 232:	4f 91       	pop	r20
 234:	3f 91       	pop	r19
 236:	2f 91       	pop	r18
 238:	1f 91       	pop	r17
 23a:	0f 91       	pop	r16
 23c:	ff 90       	pop	r15
 23e:	ef 90       	pop	r14
 240:	df 90       	pop	r13
 242:	cf 90       	pop	r12
 244:	bf 90       	pop	r11
 246:	af 90       	pop	r10
 248:	9f 90       	pop	r9
 24a:	8f 90       	pop	r8
 24c:	7f 90       	pop	r7
 24e:	6f 90       	pop	r6
 250:	5f 90       	pop	r5
 252:	4f 90       	pop	r4
 254:	3f 90       	pop	r3
 256:	2f 90       	pop	r2
 258:	1f 90       	pop	r1
 25a:	0f 90       	pop	r0
        /* 
          * We are ready to return to the caller of CSwitch() (or Exit_Kernel()).
          * Note: We should NOT re-enable interrupts while kernel is running.
          *         Therefore, we use "ret", and not "reti".
          */
       ret
 25c:	08 95       	ret

0000025e <Dispatch>:
*/
static void Dispatch() {
	/* find the next READY task
	* Note: if there is no READY task, then this will loop forever!.
	*/
	while(Process[NextP].state != READY) {
 25e:	26 e0       	ldi	r18, 0x06	; 6
 260:	31 e0       	ldi	r19, 0x01	; 1
 262:	0b c0       	rjmp	.+22     	; 0x27a <Dispatch+0x1c>
		NextP = (NextP + 1) % MAXPROCESS;
 264:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <NextP>
 268:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <NextP+0x1>
 26c:	01 96       	adiw	r24, 0x01	; 1
 26e:	83 70       	andi	r24, 0x03	; 3
 270:	99 27       	eor	r25, r25
 272:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <NextP+0x1>
 276:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <NextP>
*/
static void Dispatch() {
	/* find the next READY task
	* Note: if there is no READY task, then this will loop forever!.
	*/
	while(Process[NextP].state != READY) {
 27a:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <NextP>
 27e:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <NextP+0x1>
 282:	82 9f       	mul	r24, r18
 284:	f0 01       	movw	r30, r0
 286:	83 9f       	mul	r24, r19
 288:	f0 0d       	add	r31, r0
 28a:	92 9f       	mul	r25, r18
 28c:	f0 0d       	add	r31, r0
 28e:	11 24       	eor	r1, r1
 290:	e6 5f       	subi	r30, 0xF6	; 246
 292:	fc 4f       	sbci	r31, 0xFC	; 252
 294:	80 81       	ld	r24, Z
 296:	81 30       	cpi	r24, 0x01	; 1
 298:	29 f7       	brne	.-54     	; 0x264 <Dispatch+0x6>
		NextP = (NextP + 1) % MAXPROCESS;
	}

	Cp = &(Process[NextP]);
 29a:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <NextP>
 29e:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <NextP+0x1>
 2a2:	86 e0       	ldi	r24, 0x06	; 6
 2a4:	91 e0       	ldi	r25, 0x01	; 1
 2a6:	28 9f       	mul	r18, r24
 2a8:	f0 01       	movw	r30, r0
 2aa:	29 9f       	mul	r18, r25
 2ac:	f0 0d       	add	r31, r0
 2ae:	38 9f       	mul	r19, r24
 2b0:	f0 0d       	add	r31, r0
 2b2:	11 24       	eor	r1, r1
 2b4:	e8 5f       	subi	r30, 0xF8	; 248
 2b6:	fd 4f       	sbci	r31, 0xFD	; 253
 2b8:	f0 93 07 02 	sts	0x0207, r31	; 0x800207 <Cp+0x1>
 2bc:	e0 93 06 02 	sts	0x0206, r30	; 0x800206 <Cp>
	CurrentSp = Cp->sp;
 2c0:	80 81       	ld	r24, Z
 2c2:	91 81       	ldd	r25, Z+1	; 0x01
 2c4:	90 93 21 06 	sts	0x0621, r25	; 0x800621 <CurrentSp+0x1>
 2c8:	80 93 20 06 	sts	0x0620, r24	; 0x800620 <CurrentSp>
	Cp->state = RUNNING;
 2cc:	ee 5f       	subi	r30, 0xFE	; 254
 2ce:	fe 4f       	sbci	r31, 0xFE	; 254
 2d0:	82 e0       	ldi	r24, 0x02	; 2
 2d2:	80 83       	st	Z, r24

	NextP = (NextP + 1) % MAXPROCESS;
 2d4:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <NextP>
 2d8:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <NextP+0x1>
 2dc:	01 96       	adiw	r24, 0x01	; 1
 2de:	83 70       	andi	r24, 0x03	; 3
 2e0:	99 27       	eor	r25, r25
 2e2:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <NextP+0x1>
 2e6:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <NextP>
 2ea:	08 95       	ret

000002ec <Ping>:
/**
* A cooperative "Ping" task.
* Added testing code for LEDs.
*/
void Ping() {
	Enable_Interrupt();
 2ec:	1e b8       	out	0x0e, r1	; 14
 2ee:	78 94       	sei
	
	for(;;) {
		PORTE = 0b00100000;
 2f0:	80 e2       	ldi	r24, 0x20	; 32
 2f2:	8e b9       	out	0x0e, r24	; 14
 2f4:	fe cf       	rjmp	.-4      	; 0x2f2 <Ping+0x6>

000002f6 <Pong>:
/**
* A cooperative "Pong" task.
* Added testing code for LEDs.
*/
void Pong() {
	Enable_Interrupt();
 2f6:	1e b8       	out	0x0e, r1	; 14
 2f8:	78 94       	sei
	for(;;) {
		PORTE = 0b00010000;
 2fa:	80 e1       	ldi	r24, 0x10	; 16
 2fc:	8e b9       	out	0x0e, r24	; 14
 2fe:	fe cf       	rjmp	.-4      	; 0x2fc <Pong+0x6>

00000300 <Task_Terminate>:

/**
* The calling task terminates itself.
*/
void Task_Terminate() {
	if (KernelActive) {
 300:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <KernelActive>
 304:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <KernelActive+0x1>
 308:	89 2b       	or	r24, r25
 30a:	61 f0       	breq	.+24     	; 0x324 <Task_Terminate+0x24>
		Disable_Interrupt();
 30c:	80 e1       	ldi	r24, 0x10	; 16
 30e:	8e b9       	out	0x0e, r24	; 14
 310:	f8 94       	cli
		Cp -> request = TERMINATE;
 312:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <Cp>
 316:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <Cp+0x1>
 31a:	eb 5f       	subi	r30, 0xFB	; 251
 31c:	fe 4f       	sbci	r31, 0xFE	; 254
 31e:	83 e0       	ldi	r24, 0x03	; 3
 320:	80 83       	st	Z, r24
		Enter_Kernel();
 322:	48 cf       	rjmp	.-368    	; 0x1b4 <Enter_Kernel>
 324:	08 95       	ret

00000326 <Kernel_Create_Task_At>:
* When creating a new task, it is important to initialize its stack just like
* it has called "Enter_Kernel()"; so that when we switch to it later, we
* can just restore its execution context on its stack.
* (See file "cswitch.S" for details.)
*/
void Kernel_Create_Task_At(PD *p, voidfuncptr f) {
 326:	cf 93       	push	r28
 328:	df 93       	push	r29
 32a:	dc 01       	movw	r26, r24

	/*----BEGIN of NEW CODE----*/
	//Initialize the workspace (i.e., stack) and PD here!

	//Clear the contents of the workspace
	memset(&(p->workSpace),0,WORKSPACE);
 32c:	fc 01       	movw	r30, r24
 32e:	32 96       	adiw	r30, 0x02	; 2
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	91 e0       	ldi	r25, 0x01	; 1
 334:	ef 01       	movw	r28, r30
 336:	9c 01       	movw	r18, r24
 338:	19 92       	st	Y+, r1
 33a:	21 50       	subi	r18, 0x01	; 1
 33c:	30 40       	sbci	r19, 0x00	; 0
 33e:	e1 f7       	brne	.-8      	; 0x338 <Kernel_Create_Task_At+0x12>
	//by most significant).  This is because the "return" assembly instructions
	//(rtn and rti) pop addresses off in BIG ENDIAN (most sig. first, least sig.
	//second), even though the AT90 is LITTLE ENDIAN machine.

	//Store terminate at the bottom of stack to protect against stack underrun.
	*(unsigned char *)sp-- = ((unsigned int)Task_Terminate) & 0xff;
 340:	e1 50       	subi	r30, 0x01	; 1
 342:	ff 4f       	sbci	r31, 0xFF	; 255
 344:	80 e8       	ldi	r24, 0x80	; 128
 346:	91 e0       	ldi	r25, 0x01	; 1
 348:	80 83       	st	Z, r24
	*(unsigned char *)sp-- = (((unsigned int)Task_Terminate) >> 8) & 0xff;
 34a:	31 97       	sbiw	r30, 0x01	; 1
 34c:	90 83       	st	Z, r25
	*(unsigned char *)sp-- = 0; // (((unsigned int)Task_Terminate) >> 16) & 0xff;
 34e:	31 97       	sbiw	r30, 0x01	; 1
 350:	10 82       	st	Z, r1


	//Place return address of function at bottom of stack
	*(unsigned char *)sp-- = ((unsigned int)f) & 0xff;
 352:	31 97       	sbiw	r30, 0x01	; 1
 354:	60 83       	st	Z, r22
	*(unsigned char *)sp-- = (((unsigned int)f) >> 8) & 0xff;
 356:	31 97       	sbiw	r30, 0x01	; 1
 358:	70 83       	st	Z, r23
	*(unsigned char *)sp-- = 0; // (((unsigned int)f) >> 16) & 0xff;
 35a:	31 97       	sbiw	r30, 0x01	; 1
 35c:	10 82       	st	Z, r1
 35e:	90 e0       	ldi	r25, 0x00	; 0

	#ifdef DEBUG
	//Fill stack with initial values for development debugging
	//Registers 0 -> 31 and the status register
	for (counter = 0; counter < 34; counter++) {
		*(unsigned char *)sp-- = counter;
 360:	92 93       	st	-Z, r25
 362:	9f 5f       	subi	r25, 0xFF	; 255
	*(unsigned char *)sp-- = 0; // (((unsigned int)f) >> 16) & 0xff;

	#ifdef DEBUG
	//Fill stack with initial values for development debugging
	//Registers 0 -> 31 and the status register
	for (counter = 0; counter < 34; counter++) {
 364:	92 32       	cpi	r25, 0x22	; 34
 366:	e1 f7       	brne	.-8      	; 0x360 <Kernel_Create_Task_At+0x3a>
 368:	cd 01       	movw	r24, r26
 36a:	87 52       	subi	r24, 0x27	; 39
 36c:	9f 4f       	sbci	r25, 0xFF	; 255
	}
	#else
	//Place stack pointer at top of stack
	sp = sp - 34;
	#endif
	p->sp = sp;        /* stack pointer into the "workSpace" */
 36e:	11 96       	adiw	r26, 0x01	; 1
 370:	9c 93       	st	X, r25
 372:	8e 93       	st	-X, r24
	p->code = f;        /* function to be executed as a task */
 374:	fd 01       	movw	r30, r26
 376:	ed 5f       	subi	r30, 0xFD	; 253
 378:	fe 4f       	sbci	r31, 0xFE	; 254
 37a:	60 83       	st	Z, r22
 37c:	71 83       	std	Z+1, r23	; 0x01
	p->request = NONE;
 37e:	32 96       	adiw	r30, 0x02	; 2
 380:	10 82       	st	Z, r1
	p->state = READY;
 382:	ae 5f       	subi	r26, 0xFE	; 254
 384:	be 4f       	sbci	r27, 0xFE	; 254
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	8c 93       	st	X, r24
}
 38a:	df 91       	pop	r29
 38c:	cf 91       	pop	r28
 38e:	08 95       	ret

00000390 <Kernel_Create_Task>:
*  Create a new task
*/
static void Kernel_Create_Task(voidfuncptr f) {
	int x;

	if (Tasks == MAXPROCESS) return;  /* Too many task! */
 390:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 394:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 398:	24 30       	cpi	r18, 0x04	; 4
 39a:	31 05       	cpc	r19, r1
 39c:	a1 f1       	breq	.+104    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>

	/* find a DEAD PD that we can use  */
	for (x = 0; x < MAXPROCESS; x++) {
		if (Process[x].state == DEAD) break;
 39e:	20 91 0a 03 	lds	r18, 0x030A	; 0x80030a <Process+0x102>
 3a2:	22 23       	and	r18, r18
 3a4:	a9 f0       	breq	.+42     	; 0x3d0 <Kernel_Create_Task+0x40>
 3a6:	20 91 10 04 	lds	r18, 0x0410	; 0x800410 <Process+0x208>
 3aa:	22 23       	and	r18, r18
 3ac:	59 f0       	breq	.+22     	; 0x3c4 <Kernel_Create_Task+0x34>
 3ae:	20 91 16 05 	lds	r18, 0x0516	; 0x800516 <Process+0x30e>
 3b2:	22 23       	and	r18, r18
 3b4:	51 f0       	breq	.+20     	; 0x3ca <Kernel_Create_Task+0x3a>
 3b6:	20 91 1c 06 	lds	r18, 0x061C	; 0x80061c <Process+0x414>
 3ba:	21 11       	cpse	r18, r1
 3bc:	0c c0       	rjmp	.+24     	; 0x3d6 <Kernel_Create_Task+0x46>
	int x;

	if (Tasks == MAXPROCESS) return;  /* Too many task! */

	/* find a DEAD PD that we can use  */
	for (x = 0; x < MAXPROCESS; x++) {
 3be:	43 e0       	ldi	r20, 0x03	; 3
 3c0:	50 e0       	ldi	r21, 0x00	; 0
 3c2:	0b c0       	rjmp	.+22     	; 0x3da <Kernel_Create_Task+0x4a>
 3c4:	41 e0       	ldi	r20, 0x01	; 1
 3c6:	50 e0       	ldi	r21, 0x00	; 0
 3c8:	08 c0       	rjmp	.+16     	; 0x3da <Kernel_Create_Task+0x4a>
 3ca:	42 e0       	ldi	r20, 0x02	; 2
 3cc:	50 e0       	ldi	r21, 0x00	; 0
 3ce:	05 c0       	rjmp	.+10     	; 0x3da <Kernel_Create_Task+0x4a>
		if (Process[x].state == DEAD) break;
 3d0:	40 e0       	ldi	r20, 0x00	; 0
 3d2:	50 e0       	ldi	r21, 0x00	; 0
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <Kernel_Create_Task+0x4a>
	int x;

	if (Tasks == MAXPROCESS) return;  /* Too many task! */

	/* find a DEAD PD that we can use  */
	for (x = 0; x < MAXPROCESS; x++) {
 3d6:	44 e0       	ldi	r20, 0x04	; 4
 3d8:	50 e0       	ldi	r21, 0x00	; 0
 3da:	bc 01       	movw	r22, r24
		if (Process[x].state == DEAD) break;
	}

	++Tasks;
 3dc:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 3e0:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 3e4:	01 96       	adiw	r24, 0x01	; 1
 3e6:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 3ea:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
	Kernel_Create_Task_At(&(Process[x]), f);
 3ee:	26 e0       	ldi	r18, 0x06	; 6
 3f0:	31 e0       	ldi	r19, 0x01	; 1
 3f2:	42 9f       	mul	r20, r18
 3f4:	c0 01       	movw	r24, r0
 3f6:	43 9f       	mul	r20, r19
 3f8:	90 0d       	add	r25, r0
 3fa:	52 9f       	mul	r21, r18
 3fc:	90 0d       	add	r25, r0
 3fe:	11 24       	eor	r1, r1
 400:	88 5f       	subi	r24, 0xF8	; 248
 402:	9d 4f       	sbci	r25, 0xFD	; 253
 404:	90 cf       	rjmp	.-224    	; 0x326 <Kernel_Create_Task_At>
 406:	08 95       	ret

00000408 <OS_Init>:
* system calls.
*/
void OS_Init() {
	int x;

	Tasks = 0;
 408:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 40c:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>
	KernelActive = 0;
 410:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <KernelActive+0x1>
 414:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <KernelActive>
	NextP = 0;
 418:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <NextP+0x1>
 41c:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <NextP>
 420:	e8 e0       	ldi	r30, 0x08	; 8
 422:	f2 e0       	ldi	r31, 0x02	; 2
 424:	20 e2       	ldi	r18, 0x20	; 32
 426:	36 e0       	ldi	r19, 0x06	; 6
	// Reminder: Clear the memory for the task on creation.
	for (x = 0; x < MAXPROCESS; x++) {
		memset(&(Process[x]),0,sizeof(PD));
 428:	86 e0       	ldi	r24, 0x06	; 6
 42a:	91 e0       	ldi	r25, 0x01	; 1
 42c:	df 01       	movw	r26, r30
 42e:	ac 01       	movw	r20, r24
 430:	1d 92       	st	X+, r1
 432:	41 50       	subi	r20, 0x01	; 1
 434:	50 40       	sbci	r21, 0x00	; 0
 436:	e1 f7       	brne	.-8      	; 0x430 <OS_Init+0x28>
		Process[x].state = DEAD;
 438:	df 01       	movw	r26, r30
 43a:	ae 5f       	subi	r26, 0xFE	; 254
 43c:	be 4f       	sbci	r27, 0xFE	; 254
 43e:	1c 92       	st	X, r1
 440:	ea 5f       	subi	r30, 0xFA	; 250
 442:	fe 4f       	sbci	r31, 0xFE	; 254

	Tasks = 0;
	KernelActive = 0;
	NextP = 0;
	// Reminder: Clear the memory for the task on creation.
	for (x = 0; x < MAXPROCESS; x++) {
 444:	e2 17       	cp	r30, r18
 446:	f3 07       	cpc	r31, r19
 448:	89 f7       	brne	.-30     	; 0x42c <OS_Init+0x24>
		memset(&(Process[x]),0,sizeof(PD));
		Process[x].state = DEAD;
	}
}
 44a:	08 95       	ret

0000044c <OS_Start>:


/**
* This function starts the RTOS after creating a few tasks.
*/
void OS_Start() {
 44c:	cf 93       	push	r28
	if ( (! KernelActive) && (Tasks > 0)) {
 44e:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <KernelActive>
 452:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <KernelActive+0x1>
 456:	89 2b       	or	r24, r25
 458:	09 f0       	breq	.+2      	; 0x45c <OS_Start+0x10>
 45a:	47 c0       	rjmp	.+142    	; 0x4ea <OS_Start+0x9e>
 45c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 460:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 464:	89 2b       	or	r24, r25
 466:	09 f4       	brne	.+2      	; 0x46a <OS_Start+0x1e>
 468:	40 c0       	rjmp	.+128    	; 0x4ea <OS_Start+0x9e>
		Disable_Interrupt();
 46a:	80 e1       	ldi	r24, 0x10	; 16
 46c:	8e b9       	out	0x0e, r24	; 14
 46e:	f8 94       	cli
		/* we may have to initialize the interrupt vector for Enter_Kernel() here. */

		/* here we go...  */
		KernelActive = 1;
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <KernelActive+0x1>
 478:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <KernelActive>
* corresponding kernel function on its behalf.
*
* This is the main loop of our kernel, called by OS_Start().
*/
static void Next_Kernel_Request() {
	Dispatch();  /* select a new task to run */
 47c:	f0 de       	rcall	.-544    	; 0x25e <Dispatch>
			Kernel_Create_Task( Cp->code );
			break;
			case NEXT:
			case NONE:
			/* NONE could be caused by a timer interrupt */
			Cp->state = READY;
 47e:	c1 e0       	ldi	r28, 0x01	; 1
*/
static void Next_Kernel_Request() {
	Dispatch();  /* select a new task to run */

	while(1) {
		Cp->request = NONE; /* clear its request */
 480:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <Cp>
 484:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <Cp+0x1>
 488:	df 01       	movw	r26, r30
 48a:	ab 5f       	subi	r26, 0xFB	; 251
 48c:	be 4f       	sbci	r27, 0xFE	; 254
 48e:	1c 92       	st	X, r1

		/* activate this newly selected task */
		CurrentSp = Cp->sp;
 490:	80 81       	ld	r24, Z
 492:	91 81       	ldd	r25, Z+1	; 0x01
 494:	90 93 21 06 	sts	0x0621, r25	; 0x800621 <CurrentSp+0x1>
 498:	80 93 20 06 	sts	0x0620, r24	; 0x800620 <CurrentSp>
		Exit_Kernel();    /* or CSwitch() */
 49c:	36 de       	rcall	.-916    	; 0x10a <CSwitch>

		/* if this task makes a system call, it will return to here! */

		/* save the Cp's stack pointer */
		Cp->sp = CurrentSp;
 49e:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <Cp>
 4a2:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <Cp+0x1>
 4a6:	80 91 20 06 	lds	r24, 0x0620	; 0x800620 <CurrentSp>
 4aa:	90 91 21 06 	lds	r25, 0x0621	; 0x800621 <CurrentSp+0x1>
 4ae:	91 83       	std	Z+1, r25	; 0x01
 4b0:	80 83       	st	Z, r24

		switch(Cp->request){
 4b2:	df 01       	movw	r26, r30
 4b4:	ab 5f       	subi	r26, 0xFB	; 251
 4b6:	be 4f       	sbci	r27, 0xFE	; 254
 4b8:	8c 91       	ld	r24, X
 4ba:	81 30       	cpi	r24, 0x01	; 1
 4bc:	31 f0       	breq	.+12     	; 0x4ca <OS_Start+0x7e>
 4be:	58 f0       	brcs	.+22     	; 0x4d6 <OS_Start+0x8a>
 4c0:	82 30       	cpi	r24, 0x02	; 2
 4c2:	49 f0       	breq	.+18     	; 0x4d6 <OS_Start+0x8a>
 4c4:	83 30       	cpi	r24, 0x03	; 3
 4c6:	61 f0       	breq	.+24     	; 0x4e0 <OS_Start+0x94>
 4c8:	db cf       	rjmp	.-74     	; 0x480 <OS_Start+0x34>
			case CREATE:
			Kernel_Create_Task( Cp->code );
 4ca:	ed 5f       	subi	r30, 0xFD	; 253
 4cc:	fe 4f       	sbci	r31, 0xFE	; 254
 4ce:	80 81       	ld	r24, Z
 4d0:	91 81       	ldd	r25, Z+1	; 0x01
 4d2:	5e df       	rcall	.-324    	; 0x390 <Kernel_Create_Task>
 4d4:	d5 cf       	rjmp	.-86     	; 0x480 <OS_Start+0x34>
			break;
			case NEXT:
			case NONE:
			/* NONE could be caused by a timer interrupt */
			Cp->state = READY;
 4d6:	ee 5f       	subi	r30, 0xFE	; 254
 4d8:	fe 4f       	sbci	r31, 0xFE	; 254
			Dispatch();
 4da:	c0 83       	st	Z, r28
 4dc:	c0 de       	rcall	.-640    	; 0x25e <Dispatch>
			break;
			case TERMINATE:
			/* deallocate all resources used by this task */
			Cp->state = DEAD;
 4de:	d0 cf       	rjmp	.-96     	; 0x480 <OS_Start+0x34>
 4e0:	ee 5f       	subi	r30, 0xFE	; 254
 4e2:	fe 4f       	sbci	r31, 0xFE	; 254
			Dispatch();
 4e4:	10 82       	st	Z, r1
 4e6:	bb de       	rcall	.-650    	; 0x25e <Dispatch>
 4e8:	cb cf       	rjmp	.-106    	; 0x480 <OS_Start+0x34>
		/* here we go...  */
		KernelActive = 1;
		Next_Kernel_Request();
		/* NEVER RETURNS!!! */
	}
}
 4ea:	cf 91       	pop	r28
 4ec:	08 95       	ret

000004ee <Task_Create>:
* For this example, we only support cooperatively multitasking, i.e.,
* each task gives up its share of the processor voluntarily by calling
* Task_Next().
*/
void Task_Create(voidfuncptr f) {
	if (KernelActive) {
 4ee:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <KernelActive>
 4f2:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <KernelActive+0x1>
 4f6:	23 2b       	or	r18, r19
 4f8:	89 f0       	breq	.+34     	; 0x51c <Task_Create+0x2e>
		Disable_Interrupt();
 4fa:	20 e1       	ldi	r18, 0x10	; 16
 4fc:	2e b9       	out	0x0e, r18	; 14
 4fe:	f8 94       	cli
		Cp ->request = CREATE;
 500:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <Cp>
 504:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <Cp+0x1>
 508:	f9 01       	movw	r30, r18
 50a:	eb 5f       	subi	r30, 0xFB	; 251
 50c:	fe 4f       	sbci	r31, 0xFE	; 254
 50e:	41 e0       	ldi	r20, 0x01	; 1
 510:	40 83       	st	Z, r20
		Cp->code = f;
 512:	32 97       	sbiw	r30, 0x02	; 2
 514:	91 83       	std	Z+1, r25	; 0x01
 516:	80 83       	st	Z, r24
		Enter_Kernel();
 518:	4d ce       	rjmp	.-870    	; 0x1b4 <Enter_Kernel>
 51a:	08 95       	ret
		} else {
		/* call the RTOS function directly */
		Kernel_Create_Task(f);
 51c:	39 cf       	rjmp	.-398    	; 0x390 <Kernel_Create_Task>
 51e:	08 95       	ret

00000520 <Task_Next>:
 520:	80 e4       	ldi	r24, 0x40	; 64

/**
* The calling task gives up its share of the processor voluntarily.
*/
void Task_Next() {
	PORTB = 0b01000000;
 522:	85 b9       	out	0x05, r24	; 5
	if (KernelActive) {
 524:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <KernelActive>
 528:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <KernelActive+0x1>
 52c:	89 2b       	or	r24, r25
 52e:	61 f0       	breq	.+24     	; 0x548 <Task_Next+0x28>
		Disable_Interrupt();
 530:	80 e1       	ldi	r24, 0x10	; 16
 532:	8e b9       	out	0x0e, r24	; 14
 534:	f8 94       	cli
		Cp ->request = NEXT;
 536:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <Cp>
 53a:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <Cp+0x1>
 53e:	eb 5f       	subi	r30, 0xFB	; 251
 540:	fe 4f       	sbci	r31, 0xFE	; 254
 542:	82 e0       	ldi	r24, 0x02	; 2
 544:	80 83       	st	Z, r24
		Enter_Kernel();
 546:	36 ce       	rjmp	.-916    	; 0x1b4 <Enter_Kernel>
 548:	08 95       	ret

0000054a <__vector_21>:
}

/*
*  Timer ISR
*/
ISR (TIMER0_COMPA_vect) {
 54a:	1f 92       	push	r1
 54c:	0f 92       	push	r0
 54e:	0f b6       	in	r0, 0x3f	; 63
 550:	0f 92       	push	r0
 552:	11 24       	eor	r1, r1
 554:	0b b6       	in	r0, 0x3b	; 59
 556:	0f 92       	push	r0
 558:	2f 93       	push	r18
 55a:	3f 93       	push	r19
 55c:	4f 93       	push	r20
 55e:	5f 93       	push	r21
 560:	6f 93       	push	r22
 562:	7f 93       	push	r23
 564:	8f 93       	push	r24
 566:	9f 93       	push	r25
 568:	af 93       	push	r26
 56a:	bf 93       	push	r27
 56c:	ef 93       	push	r30
 56e:	ff 93       	push	r31
	Disable_Interrupt();
 570:	80 e1       	ldi	r24, 0x10	; 16
 572:	8e b9       	out	0x0e, r24	; 14
 574:	f8 94       	cli
	Task_Next();
 576:	d4 df       	rcall	.-88     	; 0x520 <Task_Next>
	Enable_Interrupt();
 578:	1e b8       	out	0x0e, r1	; 14
 57a:	78 94       	sei
}
 57c:	ff 91       	pop	r31
 57e:	ef 91       	pop	r30
 580:	bf 91       	pop	r27
 582:	af 91       	pop	r26
 584:	9f 91       	pop	r25
 586:	8f 91       	pop	r24
 588:	7f 91       	pop	r23
 58a:	6f 91       	pop	r22
 58c:	5f 91       	pop	r21
 58e:	4f 91       	pop	r20
 590:	3f 91       	pop	r19
 592:	2f 91       	pop	r18
 594:	0f 90       	pop	r0
 596:	0b be       	out	0x3b, r0	; 59
 598:	0f 90       	pop	r0
 59a:	0f be       	out	0x3f, r0	; 63
 59c:	0f 90       	pop	r0
 59e:	1f 90       	pop	r1
 5a0:	18 95       	reti

000005a2 <Configure_Timer>:

void Configure_Timer() {
	Disable_Interrupt();
 5a2:	80 e1       	ldi	r24, 0x10	; 16
 5a4:	8e b9       	out	0x0e, r24	; 14
 5a6:	f8 94       	cli
	
	//set timer0 interrupt at 100 Hz
	TCCR0A = 0;// set entire TCCR0A register to 0
 5a8:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;// same for TCCR0B
 5aa:	15 bc       	out	0x25, r1	; 37
	TCNT0  = 0;//initialize counter value to 0
 5ac:	16 bc       	out	0x26, r1	; 38
	// set compare match register for 100 hz increments
	OCR0A = 155;// = (16*10^6) / (100*1024) - 1 (must be <256)
 5ae:	8b e9       	ldi	r24, 0x9B	; 155
 5b0:	87 bd       	out	0x27, r24	; 39
	// turn on CTC mode
	TCCR0A |= (1 << WGM01);
 5b2:	84 b5       	in	r24, 0x24	; 36
 5b4:	82 60       	ori	r24, 0x02	; 2
 5b6:	84 bd       	out	0x24, r24	; 36
	// Set CS01 and CS00 bits for (1 << CS12) | (1 << CS10); prescaler
	TCCR0B |= (1 << CS12) | (1 << CS10);
 5b8:	85 b5       	in	r24, 0x25	; 37
 5ba:	85 60       	ori	r24, 0x05	; 5
 5bc:	85 bd       	out	0x25, r24	; 37
	// enable timer compare interrupt
	TIMSK0 |= (1 << OCIE0A);
 5be:	ee e6       	ldi	r30, 0x6E	; 110
 5c0:	f0 e0       	ldi	r31, 0x00	; 0
 5c2:	80 81       	ld	r24, Z
 5c4:	82 60       	ori	r24, 0x02	; 2
 5c6:	80 83       	st	Z, r24

	Enable_Interrupt();
 5c8:	1e b8       	out	0x0e, r1	; 14
 5ca:	78 94       	sei
 5cc:	08 95       	ret

000005ce <Port_Init>:
}

void Port_Init() {
	DDRE = 0xFF;
 5ce:	8f ef       	ldi	r24, 0xFF	; 255
 5d0:	8d b9       	out	0x0d, r24	; 13
	PORTE |= 0x00;
 5d2:	8e b1       	in	r24, 0x0e	; 14
 5d4:	8e b9       	out	0x0e, r24	; 14
 5d6:	08 95       	ret

000005d8 <main>:
/**
* This function creates two cooperative tasks, "Ping" and "Pong". Both
* will run forever.
*/
int main() {
	OS_Init();
 5d8:	17 df       	rcall	.-466    	; 0x408 <OS_Init>
	Port_Init();
 5da:	f9 df       	rcall	.-14     	; 0x5ce <Port_Init>
	Configure_Timer();
 5dc:	e2 df       	rcall	.-60     	; 0x5a2 <Configure_Timer>
	Task_Create( Pong );
 5de:	8b e7       	ldi	r24, 0x7B	; 123
 5e0:	91 e0       	ldi	r25, 0x01	; 1
 5e2:	85 df       	rcall	.-246    	; 0x4ee <Task_Create>
	Task_Create( Ping );
 5e4:	86 e7       	ldi	r24, 0x76	; 118
 5e6:	91 e0       	ldi	r25, 0x01	; 1
 5e8:	82 df       	rcall	.-252    	; 0x4ee <Task_Create>
 5ea:	30 df       	rcall	.-416    	; 0x44c <OS_Start>
	OS_Start();
 5ec:	80 e0       	ldi	r24, 0x00	; 0
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	08 95       	ret

000005f2 <_exit>:
 5f2:	f8 94       	cli

000005f4 <__stop_program>:
 5f4:	ff cf       	rjmp	.-2      	; 0x5f4 <__stop_program>
