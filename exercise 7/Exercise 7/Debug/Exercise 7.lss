
Exercise 7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000516  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004a2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000414  00800200  00800200  00000516  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000516  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000548  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000588  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001028  00000000  00000000  00000628  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000db3  00000000  00000000  00001650  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005ed  00000000  00000000  00002403  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000138  00000000  00000000  000029f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000065f  00000000  00000000  00002b28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002be  00000000  00000000  00003187  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00003445  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	d6 c1       	rjmp	.+940    	; 0x402 <__vector_21>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	26 e0       	ldi	r18, 0x06	; 6
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a4 31       	cpi	r26, 0x14	; 20
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	bf d1       	rcall	.+894    	; 0x484 <main>
 106:	cb c1       	rjmp	.+918    	; 0x49e <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <CSwitch>:
  */
CSwitch:
        /*
          * Assume I = 0, i.e., all interrupts are disabled.
          */
        SAVECTX
 10a:	0f 92       	push	r0
 10c:	1f 92       	push	r1
 10e:	2f 92       	push	r2
 110:	3f 92       	push	r3
 112:	4f 92       	push	r4
 114:	5f 92       	push	r5
 116:	6f 92       	push	r6
 118:	7f 92       	push	r7
 11a:	8f 92       	push	r8
 11c:	9f 92       	push	r9
 11e:	af 92       	push	r10
 120:	bf 92       	push	r11
 122:	cf 92       	push	r12
 124:	df 92       	push	r13
 126:	ef 92       	push	r14
 128:	ff 92       	push	r15
 12a:	0f 93       	push	r16
 12c:	1f 93       	push	r17
 12e:	2f 93       	push	r18
 130:	3f 93       	push	r19
 132:	4f 93       	push	r20
 134:	5f 93       	push	r21
 136:	6f 93       	push	r22
 138:	7f 93       	push	r23
 13a:	8f 93       	push	r24
 13c:	9f 93       	push	r25
 13e:	af 93       	push	r26
 140:	bf 93       	push	r27
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	ef 93       	push	r30
 148:	ff 93       	push	r31
 14a:	0c b7       	in	r16, 0x3c	; 60
 14c:	0f 93       	push	r16
 14e:	0f b7       	in	r16, 0x3f	; 63
 150:	0f 93       	push	r16
        /*
          * Now, we have saved the CurrentP's context.
          * Save the current H/W stack pointer into CurrentP->sp.
          */
        lds  r30, CurrentP
 152:	e0 91 12 06 	lds	r30, 0x0612	; 0x800612 <CurrentP>
        lds  r31, CurrentP+1   /* Z = (R31,R30) contains the "sp" */
 156:	f0 91 13 06 	lds	r31, 0x0613	; 0x800613 <CurrentP+0x1>
        in   r28, SPL
 15a:	cd b7       	in	r28, 0x3d	; 61
        in   r29, SPH
 15c:	de b7       	in	r29, 0x3e	; 62
        st   Z+, r28       /* store (R28=SPL,R29=SPH) indirectly via Z */
 15e:	c1 93       	st	Z+, r28
        st   Z+, r29       /* Now, CurrentP->sp = the current H/W stack pointer */
 160:	d1 93       	st	Z+, r29

00000162 <Exit_Kernel>:
       /*
         * Now, we should select a new "CurrentP".
         */
Exit_Kernel:
        call Dispatch
 162:	73 d0       	rcall	.+230    	; 0x24a <Dispatch>
        /*
          * We are now ready to restore a new CurrentP's context, i.e.,
          * switching the H/W stack pointer to this new CurrentP->sp.
          */
        lds  r30, CurrentP
 164:	e0 91 12 06 	lds	r30, 0x0612	; 0x800612 <CurrentP>
        lds  r31, CurrentP+1  /* Z = (R31,R30) contains the new "sp" */
 168:	f0 91 13 06 	lds	r31, 0x0613	; 0x800613 <CurrentP+0x1>
        ld   r28, Z+
 16c:	c1 91       	ld	r28, Z+
        ld   r29, Z+
 16e:	d1 91       	ld	r29, Z+
        out  SPL, r28
 170:	cd bf       	out	0x3d, r28	; 61
        out  SPH, r29   /* Now, H/W stack pointer = CurrentP->sp */
 172:	de bf       	out	0x3e, r29	; 62
        /*
          * We are now executing in our new CurrentP's stack.
          * Note: at the bottom of the CurrentP's context is its return address.
          */
        RESTORECTX
 174:	0f 91       	pop	r16
 176:	0f bf       	out	0x3f, r16	; 63
 178:	0f 91       	pop	r16
 17a:	0c bf       	out	0x3c, r16	; 60
 17c:	ff 91       	pop	r31
 17e:	ef 91       	pop	r30
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	bf 91       	pop	r27
 186:	af 91       	pop	r26
 188:	9f 91       	pop	r25
 18a:	8f 91       	pop	r24
 18c:	7f 91       	pop	r23
 18e:	6f 91       	pop	r22
 190:	5f 91       	pop	r21
 192:	4f 91       	pop	r20
 194:	3f 91       	pop	r19
 196:	2f 91       	pop	r18
 198:	1f 91       	pop	r17
 19a:	0f 91       	pop	r16
 19c:	ff 90       	pop	r15
 19e:	ef 90       	pop	r14
 1a0:	df 90       	pop	r13
 1a2:	cf 90       	pop	r12
 1a4:	bf 90       	pop	r11
 1a6:	af 90       	pop	r10
 1a8:	9f 90       	pop	r9
 1aa:	8f 90       	pop	r8
 1ac:	7f 90       	pop	r7
 1ae:	6f 90       	pop	r6
 1b0:	5f 90       	pop	r5
 1b2:	4f 90       	pop	r4
 1b4:	3f 90       	pop	r3
 1b6:	2f 90       	pop	r2
 1b8:	1f 90       	pop	r1
 1ba:	0f 90       	pop	r0
        ;pop r16
        ;out EIND, r16
        ;pop r30
        ;pop r31
        ;eijmp;
        ret    /* don't use rti to re-enable interrupts */
 1bc:	08 95       	ret

000001be <Task_Terminate>:

/**
* The calling task terminates itself.
*/
void Task_Terminate() {
	if (KernelActive) {
 1be:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <KernelActive>
 1c2:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <KernelActive+0x1>
 1c6:	89 2b       	or	r24, r25
 1c8:	49 f0       	breq	.+18     	; 0x1dc <Task_Terminate+0x1e>
		Disable_Interrupt();
 1ca:	f8 94       	cli
		CurrentP -> state = DEAD;
 1cc:	e0 91 12 06 	lds	r30, 0x0612	; 0x800612 <CurrentP>
 1d0:	f0 91 13 06 	lds	r31, 0x0613	; 0x800613 <CurrentP+0x1>
 1d4:	ee 5f       	subi	r30, 0xFE	; 254
 1d6:	fe 4f       	sbci	r31, 0xFE	; 254
 1d8:	10 82       	st	Z, r1
		/* we will NEVER return here! */
		asm ( "jmp Exit_Kernel":: );
 1da:	c3 cf       	rjmp	.-122    	; 0x162 <Exit_Kernel>
 1dc:	08 95       	ret

000001de <Ping>:
/**
* A cooperative "Ping" task.
* Added testing code for LEDs.
*/
void Ping() {
	Enable_Interrupt();
 1de:	78 94       	sei
	for(;;) {
		PORTE = 0b00100000;
 1e0:	80 e2       	ldi	r24, 0x20	; 32
 1e2:	8e b9       	out	0x0e, r24	; 14
 1e4:	fe cf       	rjmp	.-4      	; 0x1e2 <Ping+0x4>

000001e6 <Pong>:
/**
* A cooperative "Pong" task.
* Added testing code for LEDs.
*/
void Pong() {
	Enable_Interrupt();
 1e6:	78 94       	sei
	for(;;) {
		PORTE = 0b00010000;
 1e8:	80 e1       	ldi	r24, 0x10	; 16
 1ea:	8e b9       	out	0x0e, r24	; 14
 1ec:	fe cf       	rjmp	.-4      	; 0x1ea <Pong+0x4>

000001ee <Kernel_Create_Task_At>:
* When creating a new task, it is important to initialize its stack just like
* it has called "Enter_Kernel()"; so that when we switch to it later, we
* can just restore its execution context on its stack.
* (See file "cswitch.S" for details.)
*/
void Kernel_Create_Task_At( PD *p, voidfuncptr f ) {
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
 1f2:	dc 01       	movw	r26, r24
	#endif

	sp = (unsigned char *) &(p->workSpace[WORKSPACE-1]);

	//Clear the contents of the workspace
	memset(&(p->workSpace),0,WORKSPACE);
 1f4:	fc 01       	movw	r30, r24
 1f6:	32 96       	adiw	r30, 0x02	; 2
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	91 e0       	ldi	r25, 0x01	; 1
 1fc:	ef 01       	movw	r28, r30
 1fe:	9c 01       	movw	r18, r24
 200:	19 92       	st	Y+, r1
 202:	21 50       	subi	r18, 0x01	; 1
 204:	30 40       	sbci	r19, 0x00	; 0
 206:	e1 f7       	brne	.-8      	; 0x200 <Kernel_Create_Task_At+0x12>
	//by most significant).  This is because the "return" assembly instructions
	//(rtn and rti) pop addresses off in BIG ENDIAN (most sig. first, least sig.
	//second), even though the AT90 is LITTLE ENDIAN machine.

	//Store terminate at the bottom of stack to protect against stack underrun.
	*(unsigned char *)sp-- = ((unsigned int)Task_Terminate) & 0xff;
 208:	e1 50       	subi	r30, 0x01	; 1
 20a:	ff 4f       	sbci	r31, 0xFF	; 255
 20c:	8f ed       	ldi	r24, 0xDF	; 223
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	80 83       	st	Z, r24
	*(unsigned char *)sp-- = (((unsigned int)Task_Terminate) >> 8) & 0xff;
 212:	31 97       	sbiw	r30, 0x01	; 1
 214:	90 83       	st	Z, r25
	*(unsigned char *)sp-- = (((unsigned int)Task_Terminate) >> 16) & 0xff;
 216:	31 97       	sbiw	r30, 0x01	; 1
 218:	10 82       	st	Z, r1

	//Place return address of function at bottom of stack
	*(unsigned char *)sp-- = ((unsigned int)f) & 0xff;
 21a:	31 97       	sbiw	r30, 0x01	; 1
 21c:	60 83       	st	Z, r22
	*(unsigned char *)sp-- = (((unsigned int)f) >> 8) & 0xff;
 21e:	31 97       	sbiw	r30, 0x01	; 1
 220:	70 83       	st	Z, r23
	*(unsigned char *)sp-- = (((unsigned int)f) >> 16) & 0xff;
 222:	31 97       	sbiw	r30, 0x01	; 1
 224:	10 82       	st	Z, r1
 226:	90 e0       	ldi	r25, 0x00	; 0
	#ifdef DEBUG
	//Fill stack with initial values for development debugging
	//Registers 0 -> 31 and the status register and EIND
	for (counter = 0; counter < 34; counter++)
	{
		*(unsigned char *)sp-- = counter;
 228:	92 93       	st	-Z, r25
 22a:	9f 5f       	subi	r25, 0xFF	; 255
	*(unsigned char *)sp-- = (((unsigned int)f) >> 16) & 0xff;

	#ifdef DEBUG
	//Fill stack with initial values for development debugging
	//Registers 0 -> 31 and the status register and EIND
	for (counter = 0; counter < 34; counter++)
 22c:	92 32       	cpi	r25, 0x22	; 34
 22e:	e1 f7       	brne	.-8      	; 0x228 <Kernel_Create_Task_At+0x3a>
 230:	cd 01       	movw	r24, r26
 232:	87 52       	subi	r24, 0x27	; 39
 234:	9f 4f       	sbci	r25, 0xFF	; 255
	#else
	//Place stack pointer at top of stack
	sp = sp - 34;
	#endif

	p->sp = sp;		/* stack pointer into the "workSpace" */
 236:	11 96       	adiw	r26, 0x01	; 1
 238:	9c 93       	st	X, r25
 23a:	8e 93       	st	-X, r24
	p->state = READY;
 23c:	ae 5f       	subi	r26, 0xFE	; 254
 23e:	be 4f       	sbci	r27, 0xFE	; 254
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	8c 93       	st	X, r24
}
 244:	df 91       	pop	r29
 246:	cf 91       	pop	r28
 248:	08 95       	ret

0000024a <Dispatch>:
*/
void Dispatch() {
	/* find the next READY task
	* Note: if there is no READY task, then this will loop forever!.
	*/
	while(Process[NextP].state != READY) {
 24a:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <NextP>
 24e:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <NextP+0x1>
 252:	fc 01       	movw	r30, r24
 254:	ee 0f       	add	r30, r30
 256:	ff 1f       	adc	r31, r31
 258:	38 2f       	mov	r19, r24
 25a:	22 27       	eor	r18, r18
 25c:	e2 0f       	add	r30, r18
 25e:	f3 1f       	adc	r31, r19
 260:	8e 0f       	add	r24, r30
 262:	9f 1f       	adc	r25, r31
 264:	fc 01       	movw	r30, r24
 266:	e8 5f       	subi	r30, 0xF8	; 248
 268:	fc 4f       	sbci	r31, 0xFC	; 252
 26a:	80 81       	ld	r24, Z
 26c:	81 30       	cpi	r24, 0x01	; 1
 26e:	f1 f0       	breq	.+60     	; 0x2ac <Dispatch+0x62>
		NextP = (NextP + 1) % MAXPROCESS;
 270:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <NextP>
 274:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <NextP+0x1>
 278:	01 96       	adiw	r24, 0x01	; 1
 27a:	83 70       	andi	r24, 0x03	; 3
 27c:	99 27       	eor	r25, r25
 27e:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <NextP+0x1>
 282:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <NextP>
*/
void Dispatch() {
	/* find the next READY task
	* Note: if there is no READY task, then this will loop forever!.
	*/
	while(Process[NextP].state != READY) {
 286:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <NextP>
 28a:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <NextP+0x1>
 28e:	fc 01       	movw	r30, r24
 290:	ee 0f       	add	r30, r30
 292:	ff 1f       	adc	r31, r31
 294:	38 2f       	mov	r19, r24
 296:	22 27       	eor	r18, r18
 298:	e2 0f       	add	r30, r18
 29a:	f3 1f       	adc	r31, r19
 29c:	8e 0f       	add	r24, r30
 29e:	9f 1f       	adc	r25, r31
 2a0:	fc 01       	movw	r30, r24
 2a2:	e8 5f       	subi	r30, 0xF8	; 248
 2a4:	fc 4f       	sbci	r31, 0xFC	; 252
 2a6:	80 81       	ld	r24, Z
 2a8:	81 30       	cpi	r24, 0x01	; 1
 2aa:	11 f7       	brne	.-60     	; 0x270 <Dispatch+0x26>
		NextP = (NextP + 1) % MAXPROCESS;
	}

	/* we have a new CurrentP */
	CurrentP = &(Process[NextP]);
 2ac:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <NextP>
 2b0:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <NextP+0x1>
 2b4:	ac 01       	movw	r20, r24
 2b6:	44 0f       	add	r20, r20
 2b8:	55 1f       	adc	r21, r21
 2ba:	38 2f       	mov	r19, r24
 2bc:	22 27       	eor	r18, r18
 2be:	24 0f       	add	r18, r20
 2c0:	35 1f       	adc	r19, r21
 2c2:	82 0f       	add	r24, r18
 2c4:	93 1f       	adc	r25, r19
 2c6:	8a 5f       	subi	r24, 0xFA	; 250
 2c8:	9d 4f       	sbci	r25, 0xFD	; 253
 2ca:	90 93 13 06 	sts	0x0613, r25	; 0x800613 <CurrentP+0x1>
 2ce:	80 93 12 06 	sts	0x0612, r24	; 0x800612 <CurrentP>
	CurrentP->state = RUNNING;
 2d2:	fc 01       	movw	r30, r24
 2d4:	ee 5f       	subi	r30, 0xFE	; 254
 2d6:	fe 4f       	sbci	r31, 0xFE	; 254
 2d8:	22 e0       	ldi	r18, 0x02	; 2
 2da:	20 83       	st	Z, r18

	//Moved to bottom (this was in the wrong place).
	NextP = (NextP + 1) % MAXPROCESS;
 2dc:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <NextP>
 2e0:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <NextP+0x1>
 2e4:	01 96       	adiw	r24, 0x01	; 1
 2e6:	83 70       	andi	r24, 0x03	; 3
 2e8:	99 27       	eor	r25, r25
 2ea:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <NextP+0x1>
 2ee:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <NextP>
 2f2:	08 95       	ret

000002f4 <OS_Init>:
* system calls.
*/
void OS_Init() {
	int x;

	Tasks = 0;
 2f4:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <_edata+0x1>
 2f8:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <_edata>
	KernelActive = 0;
 2fc:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <KernelActive+0x1>
 300:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <KernelActive>
	NextP = 0;
 304:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <NextP+0x1>
 308:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <NextP>
 30c:	e6 e0       	ldi	r30, 0x06	; 6
 30e:	f2 e0       	ldi	r31, 0x02	; 2
 310:	22 e1       	ldi	r18, 0x12	; 18
 312:	36 e0       	ldi	r19, 0x06	; 6

	for (x = 0; x < MAXPROCESS; x++) {
		memset(&(Process[x]),0,sizeof(PD));
 314:	83 e0       	ldi	r24, 0x03	; 3
 316:	91 e0       	ldi	r25, 0x01	; 1
 318:	df 01       	movw	r26, r30
 31a:	ac 01       	movw	r20, r24
 31c:	1d 92       	st	X+, r1
 31e:	41 50       	subi	r20, 0x01	; 1
 320:	50 40       	sbci	r21, 0x00	; 0
 322:	e1 f7       	brne	.-8      	; 0x31c <OS_Init+0x28>
		Process[x].state = DEAD;
 324:	df 01       	movw	r26, r30
 326:	ae 5f       	subi	r26, 0xFE	; 254
 328:	be 4f       	sbci	r27, 0xFE	; 254
 32a:	1c 92       	st	X, r1
 32c:	ed 5f       	subi	r30, 0xFD	; 253
 32e:	fe 4f       	sbci	r31, 0xFE	; 254

	Tasks = 0;
	KernelActive = 0;
	NextP = 0;

	for (x = 0; x < MAXPROCESS; x++) {
 330:	e2 17       	cp	r30, r18
 332:	f3 07       	cpc	r31, r19
 334:	89 f7       	brne	.-30     	; 0x318 <OS_Init+0x24>
		memset(&(Process[x]),0,sizeof(PD));
		Process[x].state = DEAD;
	}
}
 336:	08 95       	ret

00000338 <OS_Start>:

/**
* This function starts the RTOS after creating a few tasks.
*/
void OS_Start() {
	if ( (! KernelActive) && (Tasks > 0)) {
 338:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <KernelActive>
 33c:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <KernelActive+0x1>
 340:	89 2b       	or	r24, r25
 342:	71 f4       	brne	.+28     	; 0x360 <OS_Start+0x28>
 344:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
 348:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_edata+0x1>
 34c:	89 2b       	or	r24, r25
 34e:	41 f0       	breq	.+16     	; 0x360 <OS_Start+0x28>
		Disable_Interrupt();
 350:	f8 94       	cli

		/* here we go...  */
		KernelActive = 1;
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <KernelActive+0x1>
 35a:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <KernelActive>
		asm ( "jmp Exit_Kernel":: );
 35e:	01 cf       	rjmp	.-510    	; 0x162 <Exit_Kernel>
 360:	08 95       	ret

00000362 <Task_Create>:
* For this example, we only support cooperatively multitasking, i.e.,
* each task gives up its share of the processor voluntarily by calling
* Task_Next().
*/
void Task_Create( voidfuncptr f) {
	Disable_Interrupt();
 362:	f8 94       	cli
*  Create a new task
*/
static void Kernel_Create_Task( voidfuncptr f ) {
	int x;

	if (Tasks == MAXPROCESS) return;  /* Too many task! */
 364:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <_edata>
 368:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <_edata+0x1>
 36c:	24 30       	cpi	r18, 0x04	; 4
 36e:	31 05       	cpc	r19, r1
 370:	a1 f1       	breq	.+104    	; 0x3da <Task_Create+0x78>

	/* find a DEAD PD that we can use  */
	for (x = 0; x < MAXPROCESS; x++) {
		if (Process[x].state == DEAD) break;
 372:	20 91 08 03 	lds	r18, 0x0308	; 0x800308 <Process+0x102>
 376:	22 23       	and	r18, r18
 378:	a9 f0       	breq	.+42     	; 0x3a4 <Task_Create+0x42>
 37a:	20 91 0b 04 	lds	r18, 0x040B	; 0x80040b <Process+0x205>
 37e:	22 23       	and	r18, r18
 380:	59 f0       	breq	.+22     	; 0x398 <Task_Create+0x36>
 382:	20 91 0e 05 	lds	r18, 0x050E	; 0x80050e <Process+0x308>
 386:	22 23       	and	r18, r18
 388:	51 f0       	breq	.+20     	; 0x39e <Task_Create+0x3c>
 38a:	20 91 11 06 	lds	r18, 0x0611	; 0x800611 <Process+0x40b>
 38e:	21 11       	cpse	r18, r1
 390:	0c c0       	rjmp	.+24     	; 0x3aa <Task_Create+0x48>
	int x;

	if (Tasks == MAXPROCESS) return;  /* Too many task! */

	/* find a DEAD PD that we can use  */
	for (x = 0; x < MAXPROCESS; x++) {
 392:	23 e0       	ldi	r18, 0x03	; 3
 394:	30 e0       	ldi	r19, 0x00	; 0
 396:	0b c0       	rjmp	.+22     	; 0x3ae <Task_Create+0x4c>
 398:	21 e0       	ldi	r18, 0x01	; 1
 39a:	30 e0       	ldi	r19, 0x00	; 0
 39c:	08 c0       	rjmp	.+16     	; 0x3ae <Task_Create+0x4c>
 39e:	22 e0       	ldi	r18, 0x02	; 2
 3a0:	30 e0       	ldi	r19, 0x00	; 0
 3a2:	05 c0       	rjmp	.+10     	; 0x3ae <Task_Create+0x4c>
		if (Process[x].state == DEAD) break;
 3a4:	20 e0       	ldi	r18, 0x00	; 0
 3a6:	30 e0       	ldi	r19, 0x00	; 0
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <Task_Create+0x4c>
	int x;

	if (Tasks == MAXPROCESS) return;  /* Too many task! */

	/* find a DEAD PD that we can use  */
	for (x = 0; x < MAXPROCESS; x++) {
 3aa:	24 e0       	ldi	r18, 0x04	; 4
 3ac:	30 e0       	ldi	r19, 0x00	; 0
 3ae:	bc 01       	movw	r22, r24
		if (Process[x].state == DEAD) break;
	}

	++Tasks;
 3b0:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
 3b4:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_edata+0x1>
 3b8:	01 96       	adiw	r24, 0x01	; 1
 3ba:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <_edata+0x1>
 3be:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <_edata>
	Kernel_Create_Task_At( &(Process[x]), f );
 3c2:	a9 01       	movw	r20, r18
 3c4:	44 0f       	add	r20, r20
 3c6:	55 1f       	adc	r21, r21
 3c8:	92 2f       	mov	r25, r18
 3ca:	88 27       	eor	r24, r24
 3cc:	84 0f       	add	r24, r20
 3ce:	95 1f       	adc	r25, r21
 3d0:	82 0f       	add	r24, r18
 3d2:	93 1f       	adc	r25, r19
 3d4:	8a 5f       	subi	r24, 0xFA	; 250
 3d6:	9d 4f       	sbci	r25, 0xFD	; 253
 3d8:	0a df       	rcall	.-492    	; 0x1ee <Kernel_Create_Task_At>
* Task_Next().
*/
void Task_Create( voidfuncptr f) {
	Disable_Interrupt();
	Kernel_Create_Task( f );
	Enable_Interrupt();
 3da:	78 94       	sei
 3dc:	08 95       	ret

000003de <Task_Next>:

/**
* The calling task gives up its share of the processor voluntarily.
*/
void Task_Next() {
	if (KernelActive) {
 3de:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <KernelActive>
 3e2:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <KernelActive+0x1>
 3e6:	89 2b       	or	r24, r25
 3e8:	59 f0       	breq	.+22     	; 0x400 <__LOCK_REGION_LENGTH__>
		Disable_Interrupt();
 3ea:	f8 94       	cli
		CurrentP ->state = READY;
 3ec:	e0 91 12 06 	lds	r30, 0x0612	; 0x800612 <CurrentP>
 3f0:	f0 91 13 06 	lds	r31, 0x0613	; 0x800613 <CurrentP+0x1>
 3f4:	ee 5f       	subi	r30, 0xFE	; 254
 3f6:	fe 4f       	sbci	r31, 0xFE	; 254
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	80 83       	st	Z, r24
		CSwitch();
 3fc:	86 de       	rcall	.-756    	; 0x10a <CSwitch>
		/* resume here when this task is rescheduled again later */
		Enable_Interrupt();
 3fe:	78 94       	sei
 400:	08 95       	ret

00000402 <__vector_21>:
}

/*
*  Timer ISR
*/
ISR (TIMER0_COMPA_vect) {
 402:	1f 92       	push	r1
 404:	0f 92       	push	r0
 406:	0f b6       	in	r0, 0x3f	; 63
 408:	0f 92       	push	r0
 40a:	11 24       	eor	r1, r1
 40c:	0b b6       	in	r0, 0x3b	; 59
 40e:	0f 92       	push	r0
 410:	2f 93       	push	r18
 412:	3f 93       	push	r19
 414:	4f 93       	push	r20
 416:	5f 93       	push	r21
 418:	6f 93       	push	r22
 41a:	7f 93       	push	r23
 41c:	8f 93       	push	r24
 41e:	9f 93       	push	r25
 420:	af 93       	push	r26
 422:	bf 93       	push	r27
 424:	ef 93       	push	r30
 426:	ff 93       	push	r31
	Disable_Interrupt();
 428:	f8 94       	cli
	Task_Next();
 42a:	d9 df       	rcall	.-78     	; 0x3de <Task_Next>
	Enable_Interrupt();
 42c:	78 94       	sei
}
 42e:	ff 91       	pop	r31
 430:	ef 91       	pop	r30
 432:	bf 91       	pop	r27
 434:	af 91       	pop	r26
 436:	9f 91       	pop	r25
 438:	8f 91       	pop	r24
 43a:	7f 91       	pop	r23
 43c:	6f 91       	pop	r22
 43e:	5f 91       	pop	r21
 440:	4f 91       	pop	r20
 442:	3f 91       	pop	r19
 444:	2f 91       	pop	r18
 446:	0f 90       	pop	r0
 448:	0b be       	out	0x3b, r0	; 59
 44a:	0f 90       	pop	r0
 44c:	0f be       	out	0x3f, r0	; 63
 44e:	0f 90       	pop	r0
 450:	1f 90       	pop	r1
 452:	18 95       	reti

00000454 <Configure_Timer>:


void Configure_Timer() {
	Disable_Interrupt();
 454:	f8 94       	cli
	
	//set timer0 interrupt at 100 Hz
	TCCR0A = 0;// set entire TCCR0A register to 0
 456:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;// same for TCCR0B
 458:	15 bc       	out	0x25, r1	; 37
	TCNT0  = 0;//initialize counter value to 0
 45a:	16 bc       	out	0x26, r1	; 38
	// set compare match register for 100 hz increments
	OCR0A = 155;// = (16*10^6) / (100*1024) - 1 (must be <256)
 45c:	8b e9       	ldi	r24, 0x9B	; 155
 45e:	87 bd       	out	0x27, r24	; 39
	// turn on CTC mode
	TCCR0A |= (1 << WGM01);
 460:	84 b5       	in	r24, 0x24	; 36
 462:	82 60       	ori	r24, 0x02	; 2
 464:	84 bd       	out	0x24, r24	; 36
	// Set CS01 and CS00 bits for (1 << CS12) | (1 << CS10); prescaler
	TCCR0B |= (1 << CS12) | (1 << CS10);
 466:	85 b5       	in	r24, 0x25	; 37
 468:	85 60       	ori	r24, 0x05	; 5
 46a:	85 bd       	out	0x25, r24	; 37
	// enable timer compare interrupt
	TIMSK0 |= (1 << OCIE0A);
 46c:	ee e6       	ldi	r30, 0x6E	; 110
 46e:	f0 e0       	ldi	r31, 0x00	; 0
 470:	80 81       	ld	r24, Z
 472:	82 60       	ori	r24, 0x02	; 2
 474:	80 83       	st	Z, r24

	Enable_Interrupt();
 476:	78 94       	sei
 478:	08 95       	ret

0000047a <Port_Init>:
}

void Port_Init() {
	DDRE = 0xFF;
 47a:	8f ef       	ldi	r24, 0xFF	; 255
 47c:	8d b9       	out	0x0d, r24	; 13
	PORTE |= 0x00;
 47e:	8e b1       	in	r24, 0x0e	; 14
 480:	8e b9       	out	0x0e, r24	; 14
 482:	08 95       	ret

00000484 <main>:
/**
* This function creates two cooperative tasks, "Ping" and "Pong". Both
* will run forever.
*/
int main() {
	OS_Init();
 484:	37 df       	rcall	.-402    	; 0x2f4 <OS_Init>
	Port_Init();
 486:	f9 df       	rcall	.-14     	; 0x47a <Port_Init>
	Configure_Timer();
 488:	e5 df       	rcall	.-54     	; 0x454 <Configure_Timer>
	Task_Create( Pong );
 48a:	83 ef       	ldi	r24, 0xF3	; 243
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	69 df       	rcall	.-302    	; 0x362 <Task_Create>
	Task_Create( Ping );
 490:	8f ee       	ldi	r24, 0xEF	; 239
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	66 df       	rcall	.-308    	; 0x362 <Task_Create>
 496:	50 df       	rcall	.-352    	; 0x338 <OS_Start>
	OS_Start();
 498:	80 e0       	ldi	r24, 0x00	; 0
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	08 95       	ret

0000049e <_exit>:
 49e:	f8 94       	cli

000004a0 <__stop_program>:
 4a0:	ff cf       	rjmp	.-2      	; 0x4a0 <__stop_program>
